{"ast":null,"code":"const client = require(\"./connection.js\");\n\nconst express = require(\"express\");\n\nconst app = express();\n\nconst cors = require('cors');\n\nconst bodyParser = require(\"body-parser\");\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\napp.use(bodyParser.json());\napp.use(cors());\napp.listen(3300, () => {\n  console.log(\"Server is now listening at port 3300\");\n});\nclient.connect();\napp.get(\"/realtime_db\", (req, res) => {\n  client.query(`Select * from realtime_db`, (err, result) => {\n    if (!err) {\n      res.send(result.rows);\n    }\n  });\n  client.end;\n});\napp.get(\"/realtime_db/:id\", (req, res) => {\n  client.query(`Select * from realtime_db where id=${req.params.id}`, (err, result) => {\n    if (!err) {\n      res.send(result.rows);\n    }\n  });\n  client.end;\n}); // app.put(\"/realtime_db/:id\", (req, res) => {\n//     let data = req.body;\n//     let updateQuery = `update realtime_db\n//     set imei = \"${data.imei}\",\n//     mid = \"${data.mid}\"\n//     where id = ${data.id}`\n//     client.query(updateQuery, (err, result) => {\n//         if (!err) {\n//             res.send(\"Update was successful\")\n//         }\n//         else {\n//             console.log(err.message)\n//         }\n//     });\n//     client.end;\n// })\n//\n\nconst [data_api, setData_api] = useState([]);\naxios.get(\"http://localhost:3300/users\").then(res => {\n  setData_api(res.data); // console.log(res.data)\n});\napp.get(\"/users\", (req, res) => {\n  client.query(`Select * from users`, (err, result) => {\n    if (!err) {\n      res.send(result.rows);\n    }\n  });\n  client.end;\n});\napp.get(\"/users/:id\", (req, res) => {\n  client.query(`Select * from users where id=${req.params.id}`, (err, result) => {\n    if (!err) {\n      res.send(result.rows);\n    }\n  });\n  client.end;\n});\napp.post('/users', (req, res) => {\n  const user = req.body;\n  let insertQuery = `insert into users(id, name, password) \n                       values(${user.id}, '${user.name}', '${user.password}')`;\n  client.query(insertQuery, (err, result) => {\n    if (!err) {\n      res.send('Insertion was successful');\n    } else {\n      console.log(err.message);\n    }\n  });\n  client.end;\n});\napp.put('/users/update', (req, res) => {\n  let index = ['1', '3', '5'];\n  let id = req.body.id;\n  let name = req.body.name;\n  let password = req.body.password;\n  let updateQuery = `UPDATE users\n                       SET name = '${name}',\n                       password = '${password}'\n                       WHERE id IN (${index})`;\n  client.query(updateQuery, (err, result) => {\n    if (!err) {\n      res.send('Update was successful');\n    } else {\n      console.log(err.message);\n    }\n  });\n  client.end;\n});","map":{"version":3,"names":["client","require","express","app","cors","bodyParser","React","useState","useEffect","useRef","axios","use","json","listen","console","log","connect","get","req","res","query","err","result","send","rows","end","params","id","data_api","setData_api","then","data","post","user","body","insertQuery","name","password","message","put","index","updateQuery"],"sources":["C:/Users/ACER/Desktop/work/web dev/react-demo 1/src/pg_admin/api.js"],"sourcesContent":["const client = require(\"./connection.js\");\r\nconst express = require(\"express\");\r\nconst app = express();\r\nconst cors = require('cors')\r\nconst bodyParser = require(\"body-parser\");\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport axios from \"axios\";\r\n\r\napp.use(bodyParser.json());\r\n\r\napp.use(cors());\r\n\r\napp.listen(3300, () => {\r\n    console.log(\"Server is now listening at port 3300\");\r\n})\r\n\r\nclient.connect();\r\n\r\napp.get(\"/realtime_db\", (req, res) => {\r\n    client.query(`Select * from realtime_db`, (err, result) => {\r\n        if (!err) {\r\n            res.send(result.rows);\r\n        }\r\n    });\r\n    client.end;\r\n})\r\n\r\napp.get(\"/realtime_db/:id\", (req, res) => {\r\n    client.query(`Select * from realtime_db where id=${req.params.id}`, (err, result) => {\r\n        if (!err) {\r\n            res.send(result.rows);\r\n        }\r\n    });\r\n    client.end;\r\n})\r\n\r\n\r\n// app.put(\"/realtime_db/:id\", (req, res) => {\r\n//     let data = req.body;\r\n//     let updateQuery = `update realtime_db\r\n//     set imei = \"${data.imei}\",\r\n//     mid = \"${data.mid}\"\r\n//     where id = ${data.id}`\r\n\r\n//     client.query(updateQuery, (err, result) => {\r\n//         if (!err) {\r\n//             res.send(\"Update was successful\")\r\n//         }\r\n//         else {\r\n//             console.log(err.message)\r\n//         }\r\n//     });\r\n//     client.end;\r\n// })\r\n\r\n\r\n\r\n//\r\n\r\nconst [data_api, setData_api] = useState([])\r\n\r\naxios\r\n    .get(\"http://localhost:3300/users\")\r\n    .then((res) => {\r\n        setData_api(res.data)\r\n        // console.log(res.data)\r\n    });\r\n\r\n\r\napp.get(\"/users\", (req, res) => {\r\n    client.query(`Select * from users`, (err, result) => {\r\n        if (!err) {\r\n            res.send(result.rows);\r\n        }\r\n    });\r\n    client.end;\r\n})\r\n\r\napp.get(\"/users/:id\", (req, res) => {\r\n    client.query(`Select * from users where id=${req.params.id}`, (err, result) => {\r\n        if (!err) {\r\n            res.send(result.rows);\r\n        }\r\n    });\r\n    client.end;\r\n})\r\n\r\napp.post('/users', (req, res) => {\r\n    const user = req.body;\r\n    let insertQuery = `insert into users(id, name, password) \r\n                       values(${user.id}, '${user.name}', '${user.password}')`\r\n\r\n    client.query(insertQuery, (err, result) => {\r\n        if (!err) {\r\n            res.send('Insertion was successful')\r\n        }\r\n        else { console.log(err.message) }\r\n    })\r\n    client.end;\r\n})\r\n\r\napp.put('/users/update', (req, res) => {\r\n    let index = ['1', '3', '5'];\r\n\r\n    let id = req.body.id;\r\n    let name = req.body.name;\r\n    let password = req.body.password;\r\n    let updateQuery = `UPDATE users\r\n                       SET name = '${name}',\r\n                       password = '${password}'\r\n                       WHERE id IN (${index})`\r\n\r\n    client.query(updateQuery, (err, result) => {\r\n        if (!err) {\r\n            res.send('Update was successful')\r\n        }\r\n        else { console.log(err.message) }\r\n    })\r\n    client.end;\r\n})\r\n\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}